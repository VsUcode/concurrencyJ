package com.vsu.c2.part1.t2;

/** 安全发布：
 *
 * Created by vsu on 2018/02/04.
 */


/**
 * 1
 * 不正确的发布：正确的对象被破坏
 *
 */


/**
 * 2
 * 不可变对象与初始化安全性
 *      任何线程都可以在不需要额外同步的情况下安全地访问不可变对象，即使在发布这些对象时没有使用同步
 *
 */


/**
 * 3
 * 安全发布的常用模式
 *      要安全地发布一个对象，对象的引用以及对象的状态必须同时对其他线程可见。
 *      一个正确构造的对象可以通过以下方式来安全地发布：
 *          在静态初始化函数中初始化一个对象引用
 *          将对象的引用保存到volatile类型的域或者AtomicReferance对象中
 *          将对象的引用保存到某个正确构造对象的final类型域中
 *          将对象的引用保存到一个锁保护的域中
 *
 *      容器类提供安全发布保证：
 *          通过将一个键或者值放入Hashtabke、synchronizedMap、ConcurrentMap中，可以安全地将它发布给任何从这些容器中访问它的线程
 *          通过将某个元素放入Vector、CopyOnWriteArrayList、CopyOnWriteArraySet、synchronizedList、synchronizedSet
 *          通过将某个元素放入BlockingQueue或者ConcurrentLinkedQueue中
 */


/**
 * 4
 * 事实不可变对象：
 *      如果对象从技术上来看是可变的，但其状态在发布后不会再改变，那么把这种对象称为事实不可变对象
 */


/**
 * 5
 * 可变对象：
 *      对象的发布需求取决于它的可变性：
 *          不可变对象可以通过任意机制发布
 *          事实不可变对象必须通过安全方式来发布
 *          可变对象必须通过安全方式来发布，并且必须是线程安全的或者由某个锁保护起来
 */

/**
 * 6
 * 安全地共享对象：
 *      线程封闭：线程封闭的对象只能由一个线程拥有，对象被封闭在该线程中，并且只能由这个线程修改
 *      只读共享：共享的只读对象包括不可变对象和事实不可变对象
 *      线程安全共享：线程安全的对象在其内部实现同步，因此多个线程可以通过对象的公有接口来进行访问而不需要进一步的同步
 *      保护对象：被保护的对象只能通过持有特定的锁来访问。保护对象包括封装在其他线程安全对象中的对象，以及已发布的并且由某个特定锁保护的对象
 */
public class Test5 {
}
